// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    role          Role      @default(USER)
    username      String    @unique
    password      String
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // posts         Post[]
    cartId        String    @unique
    cart          Cart      @relation(fields: [cartId], references: [id])
    Order         Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Cart {
    id      String     @id @default(cuid())
    user    User?
    product CartItem[]
    order   Order?
}

model CartItem {
    id           String  @id @default(cuid())
    productId    String
    quantity     Int
    productName  String
    productPrice Float
    productRef   String
    product      Product @relation(fields: [productId], references: [id])
    Cart         Cart?   @relation(fields: [cartId], references: [id])
    cartId       String?
}

model Product {
    id          String     @id @default(cuid())
    price       Float
    name        String
    description String
    cartItem    CartItem[]
    productURL  String
}

enum OrderStatus {
    PENDING
    COMPLETED
}

model Order {
    id       String      @id @default(cuid())
    status   OrderStatus
    authorId String
    author   User        @relation(fields: [authorId], references: [id])
    cartId   String      @unique
    cart     Cart        @relation(fields: [cartId], references: [id])
}
