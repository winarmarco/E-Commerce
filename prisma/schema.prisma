// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

enum Role {
    USER
    ADMIN
}

// model User {
//     id            String    @id @default(cuid())
//     role          Role      @default(USER)
//     username      String    @unique
//     password      String
//     firstName     String?
//     lastName      String?
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     cartId        String    @unique
//     cart          Cart?     @relation(fields: [cartId], references: [id])
//     order         Order[]
// }

model User {
    id            String    @id @default(cuid())
    role          Role      @default(USER)
    username      String    @unique
    password      String    @db.LongText
    salt          String
    firstName     String?
    lastName      String?
    email         String?   @unique
    emailVerified DateTime?
    cartId        String    @unique
    cart          Cart?     @relation(fields: [cartId], references: [id])
    order         Order[]
}

model ShippingAddress {
    id       String  @id @default(cuid())
    country  String
    state    String
    postCode String
    street   String
    order    Order[]
}

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

model Cart {
    id      String     @id @default(cuid())
    user    User?
    product CartItem[]
}

model CartItem {
    id        String  @id @default(cuid())
    productId String
    quantity  Int
    product   Product @relation(fields: [productId], references: [id])
    Cart      Cart?   @relation(fields: [cartId], references: [id])
    cartId    String?
}

model Product {
    id          String     @id @default(cuid())
    productCode String
    price       Float
    name        String
    description String     @db.LongText
    cartItem    CartItem[]
    categoryId  String
    category    Category   @relation(fields: [categoryId], references: [id])
    dateAdded   DateTime   @default(now())
    imageURL    String
}

model Category {
    id           String    @id @default(cuid())
    categoryName String
    product      Product[]
}

enum OrderStatus {
    PENDING
    COMPLETED
}

model Order {
    id                   String          @id @default(cuid())
    orderCode            String
    status               OrderStatus
    orderDateTime        DateTime
    estimatedArrivalTime DateTime
    authorId             String
    author               User            @relation(fields: [authorId], references: [id])
    firstName            String
    lastName             String
    email                String
    phoneNumber          String
    shippingAddressId    String
    shippingAddress      ShippingAddress @relation(fields: [shippingAddressId], references: [id])
    orderItems           OrderItem[]
}

model OrderItem {
    id           String @id @default(cuid())
    productName  String
    productPrice Float
    quantity     Int
    productRef   String
    orderId      String
    order        Order  @relation(fields: [orderId], references: [id])
}
